*** Create the Bst first partial GraphWalker Test ***
=====================================================

*** junit ***
=============

We are going to use junit as our test runner (executor)

For the junit jars to be in the classpath of your project, you have to place them and set the project according to your IDE

I am using VS-code

In VS-Code, all the external jar files that are in the lib folder under the project root, are in the project's classpath.

navigate to: https://github.com/junit-team/junit4/wiki/Download-and-Install

and follow the links of:
junit.jar
hamcrest-core.jar

and choose to download them as jar files and place the under lib/

-----------------------------------------------------------------------------------------------

*** pom.xml ***
===============

Add the following to the pom.xml file to add the graphwalker maven dependencies

Under properties:
-----------------

<graphwalker.version>4.2.0</graphwalker.version>


add dependencies:
-----------------

Dependencies
<dependencies>
    <!-- Testing Dependencies-->
    <dependency>
        <groupId>org.graphwalker</groupId>
        <artifactId>graphwalker-core</artifactId>
        <version>${graphwalker.version}</version>
    </dependency>
    <dependency>
        <groupId>org.graphwalker</groupId>
        <artifactId>graphwalker-io</artifactId>
        <version>${graphwalker.version}</version>
    </dependency>
    <dependency>
        <groupId>org.graphwalker</groupId>
        <artifactId>graphwalker-maven-plugin</artifactId>
        <version>${graphwalker.version}</version>
    </dependency>
    <dependency>
        <groupId>org.graphwalker</groupId>
        <artifactId>graphwalker-java</artifactId>
        <version>${graphwalker.version}</version>
    </dependency>
    <!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-simple -->
    <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-simple</artifactId>
        <version>1.6.2</version>
        <scope>test</scope>
    </dependency>
    <!-- https://mvnrepository.com/artifact/junit/junit -->
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.13</version>
        <scope>test</scope>
    </dependency>
</dependencies>
As you can see above, we add also junit dependency since we are going to use junit as our test runner (executor)

took from here: https://mvnrepository.com/artifact/junit/junit/4.12


In plugins:
-----------

<plugin>
    <groupId>org.graphwalker</groupId>
    <artifactId>graphwalker-maven-plugin</artifactId>
    <version>${graphwalker.version}</version>
    <executions>
        <execution>
            <id>generate-sources</id>
            <phase>generate-sources</phase>
            <goals>
                <goal>generate-sources</goal>
            </goals>
        </execution>
    </executions>
</plugin>
You can replace your project's pom.xml file with the pom.xml that is attached with this page.


-----------------------------------------------------------------------------------------------


*** Generate the Test Interface ***
===================================

run the following command to generate the test skeleton:

$ export JAVA_HOME=`/usr/libexec/java_home -v 1.8`
 
$ mvn clean graphwalker:generate-sources


You can find the generated test-interface file at:

target/generated-sources/graphwalker/com/cyberark/BstModel.java

-----------------------------------------------------------------------------------------------

Generated test interface:
-------------------------

// Generated by GraphWalker (http://www.graphwalker.org)
package com.cyberark;
 
import org.graphwalker.java.annotation.Model;
import org.graphwalker.java.annotation.Vertex;
import org.graphwalker.java.annotation.Edge;
 
@Model(file = "com/cyberark/BstModel.json")
public interface BstModel {
 
    @Vertex()
    void v_Found();
 
    @Edge()
    void e_Find();
 
    @Vertex()
    void v_Added();
 
    @Vertex()
    void v_VerifyInitialState();
 
    @Edge()
    void e_Add();
}

-----------------------------------------------------------------------------------------------

*** Generate the Bst Test ***
=============================

Create 'templates' folder under src/main

Download the java.template into:

src/main/templates/java.template

-----------------------------------------------------------------------------------------------

java.template:
--------------

HEADER<{{
package com.cyberark;

import org.graphwalker.core.machine.ExecutionContext;
import org.graphwalker.java.annotation.GraphWalker;

import java.nio.file.Path;
import java.nio.file.Paths;

import org.graphwalker.core.condition.ReachedVertex;
import org.graphwalker.core.generator.AStarPath;
import org.graphwalker.core.model.Edge;
import org.graphwalker.java.test.TestBuilder;
import org.junit.Test;

/** 
* Set Class name
* Set Model name this class implements
* Set Model name in MODEL_PATH
* Set vertex name for the smoke-test to stop at
*/

/** *** Set Class & Model names *** */
public class MyTest extends ExecutionContext implements MyModel {

  public final static Path MODEL_PATH = Paths.get("com/cyberark/MyModel.json"); // *** Set model name ***
}}>HEADER
  @Override
  public void {LABEL}()
  {
    System.out.println( "{LABEL}" );
    // throw new RuntimeException( "{LABEL} is not implemented yet!" );
  }
FOOTER<{{
  @Test
    public void runSmokeTest() {
        new TestBuilder()
                .addContext(new BstTest().setNextElement(new Edge().setName("e_Init").build()),
                        MODEL_PATH,
                        new AStarPath(new ReachedVertex("v_MyVertex"))) // *** Set vertex name of the vertex to stop at ***
                .execute();
    }

    @Test
    public void runFunctionalTest() {
        new TestBuilder()
                .addContext(new BstTest().setNextElement(new Edge().setName("e_Init").build()),
                        MODEL_PATH,
                        new RandomPath(new EdgeCoverage(100))) // cover all edges
                .execute();
    }

    @Test
    public void runStabilityTest() {
        new TestBuilder()
                .addContext(new BstTest().setNextElement(new Edge().setName("e_Init").build()),
                        MODEL_PATH,
                        new RandomPath(new TimeDuration(1, TimeUnit.SECONDS))) // run the test for 1 second
                .execute();
    }
}
}}>FOOTER


-----------------------------------------------------------------------------------------------

Create the test directory structure:

under src/ create the following folders structure:

test/java/com/cyberark

Run the following command when you under the project root folder, to generate the test file that will be generated under test as: 

src/test/java/com/cyberark/BstTest.java

Generate test file:
-------------------

$ java -jar ../lib/graphwalker-cli-4.2.0.jar source -i src/main/resources/com/cyberark/BstModel.json src/main/templates/java.template > src/test/java/com/cyberark/MyTest.java

and rename the generated test file to the right file name

-----------------------------------------------------------------------------------------------

The generated BstTest.java file:
--------------------------------

package com.cyberark;
 
import org.graphwalker.core.machine.ExecutionContext;
import org.graphwalker.java.annotation.GraphWalker;
 
import java.nio.file.Path;
import java.nio.file.Paths;
 
import org.graphwalker.core.condition.ReachedVertex;
import org.graphwalker.core.generator.AStarPath;
import org.graphwalker.core.model.Edge;
import org.graphwalker.java.test.TestBuilder;
import org.junit.Test;
 
/**
* Set Class name
* Set Model name this class implements
* Set Model name in MODEL_PATH
* Set vertex name for the smoke-test to stop at
*/
 
/** *** Set Class & Model names *** */
public class MyTest extends ExecutionContext implements MyModel {
 
  public final static Path MODEL_PATH = Paths.get("com/cyberark/MyModel.json"); // *** Set model name ***
 
 
  @Override
  public void e_Add()
  {
    System.out.println( "e_Add" );
    // throw new RuntimeException( "e_Add is not implemented yet!" );
  }
 
 
  @Override
  public void e_Find()
  {
    System.out.println( "e_Find" );
    // throw new RuntimeException( "e_Find is not implemented yet!" );
  }
 
 
  @Override
  public void e_Init()
  {
    System.out.println( "e_Init" );
    // throw new RuntimeException( "e_Init is not implemented yet!" );
  }
 
 
  @Override
  public void v_Added()
  {
    System.out.println( "v_Added" );
    // throw new RuntimeException( "v_Added is not implemented yet!" );
  }
 
 
  @Override
  public void v_Found()
  {
    System.out.println( "v_Found" );
    // throw new RuntimeException( "v_Found is not implemented yet!" );
  }
 
 
  @Override
  public void v_Start()
  {
    System.out.println( "v_Start" );
    // throw new RuntimeException( "v_Start is not implemented yet!" );
  }
 
 
  @Override
  public void v_VerifyInitialState()
  {
    System.out.println( "v_VerifyInitialState" );
    // throw new RuntimeException( "v_VerifyInitialState is not implemented yet!" );
  }
 
 
  @Test
    public void runSmokeTest() {
        new TestBuilder()
                .addContext(new BstTest().setNextElement(new Edge().setName("e_Init").build()),
                        MODEL_PATH,
                        new AStarPath(new ReachedVertex("v_MyVertex"))) // *** Set vertex name of the vertex to stop at ***
                .execute();
    }
 
    @Test
    public void runFunctionalTest() {
        new TestBuilder()
                .addContext(new BstTest().setNextElement(new Edge().setName("e_Init").build()),
                        MODEL_PATH,
                        new RandomPath(new EdgeCoverage(100))) // cover all edges
                .execute();
    }
 
    @Test
    public void runStabilityTest() {
        new TestBuilder()
                .addContext(new BstTest().setNextElement(new Edge().setName("e_Init").build()),
                        MODEL_PATH,
                        new RandomPath(new TimeDuration(1, TimeUnit.SECONDS))) // run the test for 1 second
                .execute();
    }
}

-----------------------------------------------------------------------------------------------

*** Execute the test ***
========================

If required, make sure to use the correct java
$ export JAVA_HOME=`/usr/libexec/java_home -v 1.8`

Run the test
$ mvn clean graphwalker:generate-sources test

-----------------------------------------------------------------------------------------------


